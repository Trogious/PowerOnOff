name: Build App

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      env:
        POOFF_APKSIGN_PASS: ${{secrets.POOFF_APKSIGN_PASS}}
      run: |
        ./gradlew build bundleRelease
        du -shc `find . -regex '.+\.\(apk\|aab\)$'`
    - name: Prepare Release
      id: prepare_release
      if: contains(github.ref, 'tags/')
      run: |
        TAG_NAME=`echo $GITHUB_REF | cut -d / -f3`
        echo ::set-output name=tag_name::$TAG_NAME

        APK_PATH=`find . -name '*.apk' | grep release`
        echo ::set-output name=apk_path::$APK_PATH
        APK_NAME=`basename $APK_PATH`
        echo ::set-output name=apk_name::$APK_NAME

        BUNDLE_PATH=`find . -name '*.aab' | grep release | grep -v intermediates`
        echo ::set-output name=bundle_path::$BUNDLE_PATH
        BUNDLE_NAME=`basename $BUNDLE_PATH`
        echo ::set-output name=bundle_name::$BUNDLE_NAME

        PACKAGE_NAME=`./tools/aapt2 dump packagename $APK_PATH`
        echo ::set-output name=package_name::$PACKAGE_NAME
    - name: Create Release
      id: create_release
      if: steps.prepare_release.outputs.tag_name
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        tag_name: ${{steps.prepare_release.outputs.tag_name}}
        release_name: Release ${{steps.prepare_release.outputs.tag_name}}
        draft: false
        prerelease: false
    - name: Upload APK Asset
      if: steps.create_release.outputs.upload_url && steps.prepare_release.outputs.apk_path && steps.prepare_release.outputs.apk_name
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        upload_url: ${{steps.create_release.outputs.upload_url}}
        asset_path: ${{steps.prepare_release.outputs.apk_path}}
        asset_name: ${{steps.prepare_release.outputs.apk_name}}
        asset_content_type: application/vnd.android.package-archive
    - name: Upload Bundle Asset
      if: steps.create_release.outputs.upload_url && steps.prepare_release.outputs.bundle_path && steps.prepare_release.outputs.bundle_name
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        upload_url: ${{steps.create_release.outputs.upload_url}}
        asset_path: ${{steps.prepare_release.outputs.bundle_path}}
        asset_name: ${{steps.prepare_release.outputs.bundle_name}}
        asset_content_type: application/octet-stream
    - name: Create Service Account JSON
      if: success() && startsWith(steps.prepare_release.outputs.tag_name, 'v')
      run: |
        cat << EOF > ./service_account.json
        ${{secrets.SERVICE_ACCOUNT_JSON}}
        EOF
    - name: Publish Bundle to Google Play
      if: startsWith(steps.prepare_release.outputs.tag_name, 'v') && steps.prepare_release.outputs.package_name && steps.prepare_release.outputs.bundle_path
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJson: ./service_account.json
        packageName: ${{steps.prepare_release.outputs.package_name}}
        releaseFile: ${{steps.prepare_release.outputs.bundle_path}}
        track: production
        whatsNewDirectory: ./whatsnew
    - name: Manual Cleanup
      if: always()
      run: rm -f ./service_account.json

